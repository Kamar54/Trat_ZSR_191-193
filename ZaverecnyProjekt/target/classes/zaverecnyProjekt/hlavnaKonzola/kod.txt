package zaverecnyProjekt.hlavnaKonzola;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import zaverecnyProjekt.bankovyUcet.BankoveUcty;
import zaverecnyProjekt.bankovyUcet.BankoveUctyAdapter;
import zaverecnyProjekt.bankovyUcet.BankovyUcet;
import zaverecnyProjekt.datum.Datum;
import zaverecnyProjekt.klienti.Klient;
import zaverecnyProjekt.klienti.Klienti;
import zaverecnyProjekt.zamestnanci.Zamestnanci;
import zaverecnyProjekt.zamestnanci.Zamestnanec;

/**
 * Táto trieda služi na komunikáciu medzi uživatelom a aplikáciou
 * 
 * @author Robert Chalcak Tomáš Pajonk a Zuzana Bajaková
 */
public class MainMetoda
{
   /**
    * Hlavna metoda, ktorá služi na spustenie celej aplikácie
    * 
    * @param args
    * @throws IOException
    * @throws ClassNotFoundException
    */
   public static void main(String[] args) throws ClassNotFoundException,
         IOException
   {
       Klienti klienti = new Klienti();
       System.out.println(klienti);
      BankoveUcty ucty = new BankoveUcty();
      ArrayList<BankovyUcet> list = new ArrayList<BankovyUcet>();
      BankoveUctyAdapter adapter = new BankoveUctyAdapter();
      adapter.nacitaj(list);
      for (int i = 0; i < list.size(); i++)
      {
         System.out.println(list.get(i));
      }

      System.out.println(ucty);
      Scanner kb = new Scanner(System.in);
      //Klienti klienti = new Klienti();
      BankoveUcty bankoveUcty = new BankoveUcty();
      zobrazAktualnyDatum();
      vstupDoSystemu(klienti, bankoveUcty, kb);

      // zobrazHlavneMenu(klienti, bankoveUcty, kb);
      kb.close();

   }

   /**
    * Zobrazujé hlavné menu a ponuká základné operácie s uctom
    * 
    * @throws IOException
    * @throws ClassNotFoundException
    * @throws FileNotFoundException
    */
   public static void zobrazHlavneMenu(Klienti klienti, BankoveUcty ucty,
         Scanner kb) throws FileNotFoundException, ClassNotFoundException,
         IOException
   {

      String volba = null;

      System.out
            .println("+--------------------------------------------------+");
      System.out
            .println("|               Vitajte v BO Aplikacii             |");
      System.out
            .println("|                                                  |");
      System.out
            .println("|                   ZUNO Bank AG                   |");
      System.out
            .println("|                                                  |");
      System.out
            .println("+--------------------------------------------------+");

      do
      {
         System.out
               .println("Prosím vyberte jednu z nižšie uvedených množností:");
         System.out.println("1) Založenie nového úctu");
         System.out.println("2) Vytvor vklad");
         System.out.println("3) Vytvor výber");
         System.out.println("4) Vypíš info o úcte");
         System.out.println("0) Koniec");

         volba = kb.next();

         while (volba.equalsIgnoreCase("0") && volba.equalsIgnoreCase("1")
               && volba.equalsIgnoreCase("2") && volba.equalsIgnoreCase("3")
               && volba.equalsIgnoreCase("4"))
         {
            System.out.println("Nesprávna volba!");
            System.out
                  .println("Zopakujte volbu znova a zadajte císlo od 0 do 4");
            volba = kb.next();
         }

         System.out.println("Vaša volba: " + volba);
         switch (volba)
         {

            case "1":
               zalozenieUctu(klienti, ucty, kb);
               break;
            case "2":
               vytvorVklad(klienti, ucty, kb);
               break;
            case "3":
               vytvorVyber(klienti, ucty, kb);
               break;
            case "4":
               VypisInfoOUcte(klienti, ucty, kb);
               break;
            default:
               if (volba.equalsIgnoreCase("0"))
               {
                  break;
               }
               else
               {
                  System.out.println("Nesprávny výber!");
               }
         }
      }
      while (!volba.equalsIgnoreCase("0"));
      System.out.println("Aplikácia sa ukoncuje!");

   }

   /**
    * Táto metóda služí na vytvorenie uctu
    * 
    * @throws IOException
    * @throws ClassNotFoundException
    * @throws FileNotFoundException
    */
   public static void zalozenieUctu(Klienti klienti, BankoveUcty ucty,
         Scanner kb) throws FileNotFoundException, ClassNotFoundException,
         IOException
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Založenie nového úctu\n");
      System.out
            .println("======================================================================\n");

      System.out.println("Zadajte meno: ");
      String meno = kb.next();
      System.out.println("Zadajte priezvisko: ");
      String priezvisko = kb.next();
      System.out.println("Zadajte rodné císlo:");
      long rc = kb.nextLong();
      System.out.println("O aký úcet máte záujem (bežný alebo sporiaci)? ");
      String typUctu = kb.next();

      while (!(typUctu.equalsIgnoreCase("bežný") || typUctu
            .equalsIgnoreCase("sporiaci")))
      {
         System.out.println("Nesprávny výber!");
         System.out.println("V ponuke máme bežný alebo sporiaci úcet ");
         typUctu = kb.next();
      }

      Klient klient = new Klient(meno, priezvisko, rc);
      klienti.pridajKlienta(klient);
      BankovyUcet ucet = new BankovyUcet(priezvisko, typUctu);

      vygenerujIdAjPreKlientaBU(klient, ucet);

      System.out.println(klient);
      System.out.print("Typ úctu: ");

      System.out.println(ucet.getTypUctu());

      vytvorPociatocnyVklad(ucty, ucet, kb);
      ucty.pridajUcet(ucet);
   }

   /**
    * Táto metóda slúži na vytvorenie pociatocného vkladu na úcet
    * 
    * @param ucet
    *           ucet, na ktorý má byt vložený pociatocný vklad
    * @param kb
    *           Scanner objekt vstupu
    * @throws IOException
    * @throws ClassNotFoundException
    */
   public static void vytvorPociatocnyVklad(BankoveUcty ucty, BankovyUcet ucet,
         Scanner kb) throws ClassNotFoundException, IOException
   {
      final double POC_VKLAD_BU = 100;
      final double POC_VKLAD_SU = 50;

      System.out.println("Aký pociatocný vklad chcete v eur: ");

      double pociatocnyVklad = kb.nextDouble();

      if (ucet.getTypUctu().equalsIgnoreCase("sporiaci"))
      {
         while (pociatocnyVklad < POC_VKLAD_SU)
         {
            System.out
                  .println("Nedostatocný pociatocný vklad. Pociatocný vklad musí byt minimálne "
                        + POC_VKLAD_SU + " Eur.");
            pociatocnyVklad = kb.nextDouble();
         }

         ucet.vloz(pociatocnyVklad);
         ucet.pripisUrok();

         System.out
               .println("======================================================================");
         System.out
               .print("Vklad na úcet bol úspešne zrealizovaný. Aktuálny zostatok na úcte: ");
         System.out.println(ucet.getAktualnyZostatok());
      }
      else if (ucet.getTypUctu().equalsIgnoreCase("bežný"))
      {

         while (pociatocnyVklad < POC_VKLAD_BU)
         {
            System.out
                  .println("Nedostatocný pociatocný vklad. Pociatocný vklad musí byt minimálne "
                        + POC_VKLAD_BU + " Eur.");
            pociatocnyVklad = kb.nextDouble();
         }

         ucet.vloz(pociatocnyVklad);
         ucet.pripisUrok();

         System.out
               .print("Vklad na úcet bol úspešne zrealizovaný. Aktuálny zostatok na úcte:");
         System.out.println(ucet.getAktualnyZostatok());
         ucty.pridajUcet(ucet);
      }

      System.out
            .println("======================================================================");
   }

   /**
    * Táto metóda slúži na vytvorenie vkladu a vloženie prostriedkov na úcet
    * 
    * @throws IOException
    * @throws ClassNotFoundException
    */
   public static void vytvorVklad(Klienti klienti, BankoveUcty ucty, Scanner kb)
         throws ClassNotFoundException, IOException
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie vkladu\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie sú dostupné žiadne úcty\n");
         System.out
               .println("======================================================================");
         return;
      }

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();

      System.out.println("Zadaj rodné císlo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {

         System.out
               .println("Žiaden klient so zadaným priezviskom, alebo s rodným císlom sa nenašiel!");
         System.out
               .println("Chcete ukoncit vyhladavanie? s klavesou 0 ukoncite");
         String koniec = kb.next();
         if (koniec.equals("0"))
         {
            return;
         }
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodné císlo klienta: ");
         rc = kb.nextLong();

      }

      BankovyUcet zmena = ucty.vyhladajUcet(priezvisko);

      System.out.println("Aký vklad chcete vložit na úcet v eur: ");
      double vklad = kb.nextDouble();

      while (vklad < 0.0)
      {
         System.out.println("Nedostatocný  vklad. Vklad musí byt viac " + 0
               + " Eur.");
         vklad = kb.nextDouble();
      }

      zmena.vloz(vklad);
      zmena.pripisUrok();

      ucty.urobZmenuNaUcte(ucty.getIndexBU(priezvisko), zmena);

      System.out
            .println("======================================================================");
      System.out
            .println("Vklad na úcet bol úspešne zrealizovaný. Aktuálny zostatok na úcte: ");
      System.out.println(zmena.getAktualnyZostatok());
      System.out
            .println("======================================================================");

   }

   /**
    * Táto metóda slúži na vytvornie a umožnuje vybrat peniaze z úctu, a zároven
    * skonroluje cí vyberaná ciastka nie je vyššia ako stáv na úcte ale môže
    * dôjst k nepovolenému precerpániu z dôvodov zauctovania poplatkov za vyber
    * 
    * @throws IOException
    * @throws ClassNotFoundException
    */
   public static void vytvorVyber(Klienti klienti, BankoveUcty ucty, Scanner kb)
         throws ClassNotFoundException, IOException
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie výberu\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie sú dostupné žiadne úcty\n");
         System.out
               .println("======================================================================");
         return;
      }

      double zostatok;

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();

      System.out.println("Zadaj rodné císlo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Žiaden klient so zadaným priezviskom, alebo s rodným císlom sa nenašiel!");
         System.out
               .println("Chcete ukoncit vyhladavanie? s klavesou 0 ukoncite");
         String koniec = kb.next();
         if (koniec.equals("0"))
         {
            return;
         }
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodné císlo klienta: ");
         rc = kb.nextLong();
      }

      System.out.println("Kolko Eur si požadujete vybrat z úctu? ");
      double vyber = kb.nextDouble();

      zostatok = ucty.vyhladajUcet(priezvisko).getAktualnyZostatok();
      while (vyber > zostatok)
      {
         System.out.println("Na úcte nie je dostatok financných prostriedkov!");
         System.out.println("Kolko Eur si požadujete vybrat z úctu? ");
         vyber = kb.nextDouble();
      }
      BankovyUcet zmena = ucty.vyhladajUcet(priezvisko);

      zmena.vyber(vyber);
      ucty.urobZmenuNaUcte(ucty.getIndexBU(priezvisko), zmena);

      System.out
            .println("======================================================================");
      System.out
            .println("Výber z úctu bol úspešne zrealizovaný. Aktuálny zostatok na úcte:");
      System.out.println(zmena.getAktualnyZostatok());
      System.out
            .println("======================================================================");

   }

   /**
    * Vypise informácie o úcte
    * 
    * @param klienti
    *           vyhlada klienta podla zadaných kríterii a vratí
    *           indentifikator,ktorý sluzi na vyhladanie uctu
    * @param ucty
    *           zoznám uctov
    * @param kb
    *           Scanner vstupu
    * @throws IOException
    * @throws ClassNotFoundException
    */
   public static void VypisInfoOUcte(Klienti klienti, BankoveUcty ucty,
         Scanner kb) throws ClassNotFoundException, IOException
   {
      BankovyUcet ucet = new BankovyUcet();

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie výpisu o úcte\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie sú dostupné žiadne úcty\n");
         System.out
               .println("======================================================================");
         return;
      }

      Klient kl = new Klient();

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();
      System.out.println("Zadaj rodné císlo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Žiaden klient so zadaným priezviskom, alebo s rodným císlom sa nenašiel!");

         System.out
               .println("Chcete ukoncit vyhladavanie? s klavesou 0 ukoncite");
         String koniec = kb.next();
         if (koniec.equals("0"))
         {
            return;
         }
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodné císlo klienta: ");
         rc = kb.nextLong();
      }

      kl = klienti.vyhladajKlienta(priezvisko, rc);

      System.out
            .println("======================================================================================================");
      System.out.println("Meno: " + kl.getMeno() + " " + kl.getPriezvisko()
            + "  Rodné Císlo: " + kl.getRodneCislo() + " Císlo úctu #: "
            + kl.getRovnakeId());

      BankovyUcet infoOUcte = ucty.vyhladajUcet(priezvisko);

    
         System.out.println("Aktuálny zostatok: " + infoOUcte.getAktualnyZostatok()
               + " Eur.");
         System.out.println(infoOUcte.getTypUctu() + ": " + infoOUcte.getRovnakeId());
         System.out.println("Úroková sadzba: " + infoOUcte.getUrok() + "%");
      

      System.out
            .println("======================================================================================================");
   }

   /**
    * Tato metoda zobrazuje aktualny datum s nazvom mesiaca a aktualny cas
    * spustenia aplikacie
    */
   public static void zobrazAktualnyDatum()
   {
      Datum datum = new Datum();
      System.out.println(datum.getDen() + "/" + datum.getNazovMesiaca() + "/"
            + datum.getRok());
      System.out.println(datum.toStringCas());
   }

   /**
    * Generuje a vytvára jedinecné císlo, ktoré je zároven nastavene pre klienta
    * aj ucet , cíže podla toho sa dá daný úcet sparovat s klientom
    * 
    * @param klient
    *           ktorému je pridelené rovnaké indentifikacné císlo ako uctu
    * @param ucet
    *           ktorý má pridelené rovnaké císlo ako klient
    */
   public static void vygenerujIdAjPreKlientaBU(Klient klient, BankovyUcet ucet)
   {
      if (ucet.getTypUctu().equalsIgnoreCase("bežný"))
      {
         int range = 5000 - 1000 + 1;
         int rand = (int) (Math.random() * range) + 1000;
         int cislo = rand;
         klient.setRovnakeId(cislo);
         ucet.setRovnakeId(cislo);
      }
      else
      {
         int range = 9000 - 5000 + 1;
         int rand = (int) (Math.random() * range) + 5000;
         int cislo = rand;
         klient.setRovnakeId(cislo);
         ucet.setRovnakeId(cislo);
      }
   }

   public static void vstupDoSystemu(Klienti klienti, BankoveUcty ucty,
         Scanner kb) throws FileNotFoundException, ClassNotFoundException,
         IOException
   {
      String moznost;
      do
      {
         System.out
               .println("Ktoru z nasledujucich moznosti si prajete uskutocnit? A) Prihlasi sa, B) Zaregistrovat sa, C) Ukoncit program");
         moznost = kb.next();
         while (!moznost.equalsIgnoreCase("A")
               && !moznost.equalsIgnoreCase("B")
               && !moznost.equalsIgnoreCase("C"))
         {
            System.out.println("Nespravna volba!");
            System.out
                  .println("Zopakujte volbu znova a zvolte moznost A), B) alebo C): ");
            moznost = kb.next();
         }

         System.out.println("Vasa moznost: " + moznost);
         switch (moznost)
         {
            case "A":
               prihlasenieSa(klienti, ucty, kb);
               break;
            case "B":
               registracia(kb);
               break;
         }
      }
      while (!moznost.equalsIgnoreCase("C"));
      System.out.println("Dakujeme za pouzitie programu, program sa ukoncuje.");
   }

   public static void prihlasenieSa(Klienti klienti, BankoveUcty ucty,
         Scanner kb) throws FileNotFoundException, ClassNotFoundException,
         IOException
   {
      String meno;
      String id;
      Zamestnanci zamestnanci = new Zamestnanci();
      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Prihlasenie sa do systemu\n");
      System.out
            .println("======================================================================\n");

      System.out.print("Zadajte svoje meno: ");
      meno = kb.next();
      System.out.print("Zadajte svoje ID: ");
      id = kb.next();

      zamestnanci.vyhladajZamestnanca(id, meno);
      if (((Zamestnanec) zamestnanci.vyhladajZamestnanca(id, meno)).getMeno() != null)
      {
         System.out.println("Boli ste uspesne prihlaseny do systemu.");
         System.out.println("Aktualny prihlaseny: ");
         System.out.println(zamestnanci.vyhladajZamestnanca(id, meno));
         zobrazHlavneMenu(klienti, ucty, kb);
      }
      else
      {
         System.out.println("Nespravne meno alebo id!");
         System.out.println("Skuste to znova a skontrolujte ci nemate zle"
               + "nastavenu klavesnicu, alebo zapnuty caps lock");
         return;
      }
   }

   public static void registracia(Scanner kb) throws FileNotFoundException,
         ClassNotFoundException, IOException
   {
      Zamestnanci zamestnanci = new Zamestnanci();
      Object zamestnanec = new Zamestnanec();
      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Registracia zamestnanca do systemu\n");
      System.out
            .println("======================================================================\n");

      System.out.print("Zadajte meno zamestnanca: ");
      String meno = kb.next();
      ((Zamestnanec) zamestnanec).setMeno(meno);
      System.out.println("Zadajte priezvisko zamestnanca: ");
      String priezvisko = kb.next();
      ((Zamestnanec) zamestnanec).setPriezvisko(priezvisko);
      zamestnanci.pridajZamestnanca(zamestnanec);

      System.out.println("Zamestnanec: ");
      System.out.println(zamestnanec);
      System.out.println("Bol uspesne pridany do systemu.");
      System.out.println("Prihlasit sa mozete pomocou vaseho mena: "
            + ((Zamestnanec) zamestnanec).getMeno());
      System.out.println("alebo vaseho prideleneho ID, ktore si zapiste: "
            + ((Zamestnanec) zamestnanec).getId());
      return;

   }

}
