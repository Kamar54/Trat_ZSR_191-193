package zaverecnyProjekt.hlavnaKonzola;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

import zaverecnyProjekt.bankovyUcet.BankoveUcty;
import zaverecnyProjekt.bankovyUcet.BankovyUcet;
import zaverecnyProjekt.bankovyUcet.BeznyUcet;
import zaverecnyProjekt.bankovyUcet.SporiaciUcet;
import zaverecnyProjekt.datum.Datum;
import zaverecnyProjekt.klienti.Klient;
import zaverecnyProjekt.klienti.Klienti;
import zaverecnyProjekt.zamestnanci.Zamestnanci;
import zaverecnyProjekt.zamestnanci.Zamestnanec;

public class MainMetoda
{

   /**
    * Hlavna metoda, ktora sluzi na spustenie aplikacie
    * 
    * @param args
    * @throws IOException
    * @throws ClassNotFoundException
    * @throws FileNotFoundException
    */
   public static void main(String[] args) throws FileNotFoundException,
         ClassNotFoundException, IOException
   {
      Scanner kb = new Scanner(System.in);
      Klienti klienti = new Klienti();
      BankoveUcty bankoveUcty = new BankoveUcty();
      Zamestnanci zamestnanci = new Zamestnanci();
      zobrazAktualnyDatum();
      zobrazHlavneMenu(zamestnanci, klienti, bankoveUcty, kb);
      kb.close();
   }

   /**
    * Zobrazuje hlavne operacie a pracu s uctom
    */
   public static void zobrazHlavneMenu(Zamestnanci zamestnanci,Klienti klienti, BankoveUcty ucty,Scanner kb)
   {
      
      int volba = 0;

      System.out
            .println("+--------------------------------------------------+");
      System.out
            .println("|               Vitajte v BO Aplikacii             |");
      System.out
            .println("|                                                  |");
      System.out
            .println("|                   ZUNO Bank AG                   |");
      System.out
            .println("|                                                  |");
      System.out
            .println("+--------------------------------------------------+");

      

      String moznost = kb.next();
      
          do{
         System.out.println("Ktoru z nasledujucich moznosti si prajete uskutocnit? A) Prihlasi sa, B) Zaregistrovat sa");
         
       
         while (moznost.equals("A")  || moznost.equals("B"))
         {
            System.out.println("Nespravna volba!");
            System.out
                  .println("Zopakujte volbu znova a zvolte moznost A) alebo B)");
            volba = kb.nextInt();
         }
         System.out.println("Vasa moznost: " + moznost);
         switch (volba)
         {
            case 1:
               zamestnanci.jeZamestnanec(moznost);
               break;
            case 2:
               zaregistrovanieZamestnanca(zamestnanci,kb);
               break;
            default:
               if (volba == 0)
               {
                  break;
               }
               else
               {
                  System.out.println("Aplikacia sa ukoncuje");
               }
               while(volba != 0);
             
            System.out.println("Aplikacia sa ukoncuje!");
              
       
      
         do{
         System.out
               .println("Dobry den. Aku z nasledujucich moznosti z ponuky ste si zvolili?:");
         System.out.println("1) Zalozenie uctu");
         System.out.println("2) Vytvor vklad");
         System.out.println("3) Vytvor vyber");
         System.out.println("4) Vypis uctu- info o ucte");
         System.out.println("0) Koniec");

         volba = kb.nextInt();
         while (volba < 0 || volba > 4)
         {
            System.out.println("Nespravna volba!");
            System.out
                  .println("Zopakujte volbu znova a zvolte si cislo od 0 do 4");
            volba = kb.nextInt();
         }
         System.out.println("Vasa volba: " + volba);
         switch(volba)
         {
            case 1:
               zalozenieUctu(klienti,ucty,kb);
               break;
            case 2:
               vytvorVklad(klienti, ucty,kb);
               break;
            case 3:
               vytvorVyber(klienti, ucty,kb);
               break;
            case 4:
               VypisInfoOUcte(klienti, ucty,kb);
               break;
            default:
               if (volba == 0)
               {
                  break;
               }
               else
               {
                  System.out.println("Nespravny vyber !!!");
               }
         }
      
      while(volba != 0);
      System.out.println("Aplikacia sa ukoncuje!");
       
           
       
          
   }


   public static void zaregistrovanieZamestnanca(Zamestnanci zamestnanci,
         Scanner kb) throws ClassNotFoundException, IOException
   {
      System.out
            .println("======================================================================\n");
      System.out.println("Registracia zamestnanca");
      System.out
            .println("======================================================================\n");

      System.out.println("Zadajte meno: ");
      String menoZamestnanca = kb.next();
      System.out.println("Zadajte priezvisko: ");
      String priezviskoZamestnanca = kb.next();

      Zamestnanec zamestnanec = new Zamestnanec(menoZamestnanca,
            priezviskoZamestnanca);
      zamestnanci.pridajZamestnanca(zamestnanec);
   }

   /**
    * tato metoda sluzi na vytvorenie uctu
    */
   public static void zalozenieUctu(Klienti klienti, BankoveUcty ucty,
         Scanner kb)
   {

      BankovyUcet sporiaciUcet = new SporiaciUcet();
      BankovyUcet beznyUcet = new BeznyUcet();

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Zalozenie noveho uctu\n");
      System.out
            .println("======================================================================\n");

      System.out.println("Zadajte meno: ");
      String meno = kb.next();
      System.out.println("Zadajte priezvisko: ");
      String priezvisko = kb.next();
      System.out.println("Zadajte rodne cislo:");
      long rc = kb.nextLong();
      System.out.println("O aky ucet mate zaujem (bezny alebo sporiaci)? ");
      String typUctu = kb.next();

      Klient klient = new Klient(meno, priezvisko, rc);
      klienti.pridajKlienta(klient);

      while (!(typUctu.equalsIgnoreCase("bezny") || typUctu
            .equalsIgnoreCase("sporiaci")))
      {
         System.out.println("Nespravny vyber!");
         System.out.println("V ponuke mame iba bezny alebo sporiaci ucet ");
         typUctu = kb.next();
      }
      if (typUctu.equalsIgnoreCase("beznyï¿½"))
      {
         beznyUcet.setTypUctu(typUctu);

         vygenerujIdAjPreKlientaBU(klient, beznyUcet);
         ucty.pridajUcet(beznyUcet);
      }
      else
      {
         sporiaciUcet.setTypUctu(typUctu);

         vygenerujIdAjPreKlientaBU(klient, sporiaciUcet);
         ucty.pridajUcet(sporiaciUcet);
      }

      System.out.println(klient);
      System.out.print("Typ uctu: ");

      if (typUctu.equalsIgnoreCase(sporiaciUcet.getTypUctu()))
      {
         System.out.println(sporiaciUcet.getTypUctu());
         vytvorPociatocnyVklad(sporiaciUcet, kb);
      }
      else
      {
         System.out.println(beznyUcet.getTypUctu());
         vytvorPociatocnyVklad(beznyUcet, kb);
      }
   }

   public static void vytvorPociatocnyVklad(BankovyUcet ucet, Scanner kb)
   {
      final double POC_VKLAD_BU = 100;
      final double POC_VKLAD_SU = 50;

      System.out.println("Aky pociatocny vklad chcete realizovat eur? ");

      double pociatocnyVklad = kb.nextDouble();

      if (ucet.getTypUctu().equalsIgnoreCase("sporiaci"))
      {
         while (pociatocnyVklad < POC_VKLAD_SU)
         {
            System.out
                  .println("Nedostatocny pociatocny vklad. Pociatocny vklad musi byt minimalne "
                        + POC_VKLAD_SU + " Eur.");
            pociatocnyVklad = kb.nextDouble();
         }

         ucet.vloz(pociatocnyVklad);
         ucet.pripisUrok();

         System.out
               .println("======================================================================");
         System.out
               .print("Vklad na ucet bol uspesne realizovany. Aktualny zostatok je: ");
         System.out.println(ucet.getAktualnyZostatok());
      }
      else if (ucet.getTypUctu().equalsIgnoreCase("bezny"))
      {

         while (pociatocnyVklad < POC_VKLAD_BU)
         {
            System.out
                  .println("Nedostatocny pociatocny vklad. Pociatocny vklad musi byt minimalne "
                        + POC_VKLAD_BU + " Eur.");
            pociatocnyVklad = kb.nextDouble();
         }

         ucet.vloz(pociatocnyVklad);
         ucet.pripisUrok();
         System.out
               .print("Vklad na ucet bol uspesne realizovany. Aktualny zostatok je:");
         System.out.println(ucet.getAktualnyZostatok());
      }
      System.out
            .println("======================================================================");
   }

   /**
    * tato metoda sluzi na vytvorenie vkladu
    */
   public static void vytvorVklad(Klienti klienti, BankoveUcty ucty, Scanner kb)
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie vkladu\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie su dostupne ziadne ucty\n");
         System.out
               .println("======================================================================");
         return;
      }

      BankovyUcet zmena = null;

      int index;

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();

      System.out.println("Zadajte rodne cislo : ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Ziadny klient so zadanym mwno alebo s rodnym cislom sa nenasiel");
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadajte rodne cislo klienta: ");
         rc = kb.nextLong();
      }

      System.out.println("Aky vysoky vklad v eur chcete realizovat: ");
      double vklad = kb.nextDouble();

      while (vklad < 0.0)
      {
         System.out.println("Nedostatocny vklad. Vklad musi byt minimalne " + 0
               + " Eur.");
         vklad = kb.nextDouble();
      }
      index = ucty.getIndexBu(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena.vloz(vklad);
      zmena.pripisUrok();
      ucty.urobZmenuNaUcte(zmena, index);

      System.out
            .println("======================================================================");
      System.out
            .println("Vklad na ucet bol uspesne realizovany. Aktualny zostatok je: ");
      System.out.println(zmena.getAktualnyZostatok());
      System.out
            .println("======================================================================");

   }

   /**
    * tato metoda sluzi na vytvorenie vyberu a umoznuje vybrat peniaze z uctu
    */
   public static void vytvorVyber(Klienti klienti, BankoveUcty ucty, Scanner kb)
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie vyberu\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie su dostupne ziadne ucty\n");
         System.out
               .println("======================================================================");
         return;
      }

      BankovyUcet zmena = null;
      int index;

      double zostatok;

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();

      System.out.println("Zadaj rodne cislo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Ziaden klient sa so zadanym priezviskom alebo rodnym cislo nenasiel!");
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodne cislo klienta: ");
         rc = kb.nextLong();
      }

      System.out.println("Kolko eur si prajete vybrat z uctu?");
      double vyber = kb.nextDouble();

      zostatok = ucty.vyhladajUcet(
            klienti.vyhladajKlienta(priezvisko, rc).getRovnakeId())
            .getAktualnyZostatok();
      while (vyber > zostatok)
      {
         System.out.println("Na ucte nemate dostatocny zostatok !");
         System.out.println("Kolko eur si prajete vybrat z uctu? ");
         vyber = kb.nextDouble();
      }

      index = ucty.getIndexBu(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena.vyber(vyber);
      ucty.urobZmenuNaUcte(zmena, index);

      System.out
            .println("======================================================================");
      System.out
            .println("Vyber z uctu bol uspesne realizovany. Aktualny zostatok je::");
      System.out.println(zmena.getAktualnyZostatok());
      System.out
            .println("======================================================================");

   }

   public static void VypisInfoOUcte(Klienti klienti, BankoveUcty ucty,
         Scanner kb)
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie vypisu uctu\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie su dostupne ziadne ucty\n");
         System.out
               .println("======================================================================");
         return;
      }

      Klient kl = new Klient();

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();
      System.out.println("Zadaj rodne cislo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Ziaden klient so zadanym priezvisko alebo rodnym cislom sa nenasiel");
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodne cislo klienta: ");
         rc = kb.nextLong();
      }

      kl = klienti.vyhladajKlienta(priezvisko, rc);

      System.out
            .println("======================================================================================================");
      System.out.println("Meno: " + kl.getMeno() + " " + kl.getPriezvisko()
            + "  Rodne cislo: " + kl.getRodneCislo() + " Cislo uctu #: "
            + kl.getRovnakeId());

      if (ucty
            .vyhladajUcet(
                  klienti.vyhladajKlienta(priezvisko, rc).getRovnakeId())
            .getTypUctu().equalsIgnoreCase("bezny"))
      {

         BankovyUcet bu = new BeznyUcet();
         bu = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
               .getRovnakeId());
         System.out.println("Aktualny zostatok: " + bu.getAktualnyZostatok()
               + " Eur.");
         System.out.println(bu.getTypUctu() + ": " + bu.getRovnakeId());
         System.out.println("Urokova sadzba: " + bu.getUrok() + "%");
      }
      else
      {
         BankovyUcet su = new SporiaciUcet();
         su = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
               .getRovnakeId());
         System.out.println("Aktualny zostatok: " + su.getAktualnyZostatok()
               + " Eur.");
         System.out.println(su.getTypUctu() + ": " + su.getRovnakeId());
         System.out.println("Urokova sadzba: " + su.getUrok() + "%");
      }
      System.out
            .println("======================================================================================================");
   }

   /**
    * Tato metoda zobrazuje aktualny datum s nazvom mesiaca a aktualny cas
    * spustenia aplikacie
    */
   public static void zobrazAktualnyDatum()
   {
      Datum datum = new Datum();
      System.out.println(datum.getDen() + "/" + datum.getNazovMesiaca() + "/"
            + datum.getRok());
      System.out.println(datum.toStringCas());
   }

   public static void vygenerujIdAjPreKlientaBU(Klient klient, BankovyUcet ucet)
   {
      if (ucet.getTypUctu().equalsIgnoreCase("beznyï¿½"))
      {
         int range = 5000 - 1000 + 1;
         int rand = (int) (Math.random() * range) + 1000;
         int cislo = rand;
         klient.setRovnakeId(cislo);
         ucet.setRovnakeId(cislo);
      }
      else
      {
         int range = 9000 - 5000 + 1;
         int rand = (int) (Math.random() * range) + 1000;
         int cislo = rand;
         klient.setRovnakeId(cislo);
         ucet.setRovnakeId(cislo);
      }
   }

}
