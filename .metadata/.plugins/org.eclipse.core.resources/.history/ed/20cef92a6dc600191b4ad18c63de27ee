package zaverecnyProjekt.hlavnaKonzola;

import java.io.IOException;
import java.util.Scanner;

import zaverecnyProjekt.bankovyUcet.BankoveUcty;
import zaverecnyProjekt.bankovyUcet.BankovyUcet;
import zaverecnyProjekt.bankovyUcet.BeznyUcet;
import zaverecnyProjekt.bankovyUcet.SporiaciUcet;
import zaverecnyProjekt.datum.Datum;
import zaverecnyProjekt.klienti.Klient;
import zaverecnyProjekt.klienti.Klienti;
import zaverecnyProjekt.zamestnanci.Zamestnanci;

/**
 * Táto trieda služi na komunikáciu medzi uživateľom a aplikáciou
 * 
 * @author Robert Chalcak Tomáš Pajonk a Zuzana Bajaková
 */
public class MainMetoda
{
   /**
    * Hlavna metoda, ktorá služi na spustenie celej aplikácie
    * 
    * @param args
    * @throws IOException 
    * @throws ClassNotFoundException 
    */
   public static void main(String[] args) throws ClassNotFoundException, IOException
   {
      Zamestnanci zamestnanci = new Zamestnanci();
      System.out.println(zamestnanci);
      Scanner kb = new Scanner(System.in);
      Klienti klienti = new Klienti();
      BankoveUcty bankoveUcty = new BankoveUcty();
      zobrazAktualnyDatum();
      zobrazHlavneMenu(klienti, bankoveUcty, kb);
      kb.close();
      
   }

   /**
    * Zobrazujé hlavné menu a ponuká základné operácie s učtom
    */
   public static void zobrazHlavneMenu(Klienti klienti, BankoveUcty ucty,
         Scanner kb)
   {

      String volba = null;

      System.out
            .println("+--------------------------------------------------+");
      System.out
            .println("|               Vitajte v BO Aplikacii             |");
      System.out
            .println("|                                                  |");
      System.out
            .println("|                   ZUNO Bank AG                   |");
      System.out
            .println("|                                                  |");
      System.out
            .println("+--------------------------------------------------+");

      do
      {
         System.out
               .println("Prosím vyberte jednu z nižšie uvedených množností:");
         System.out.println("1) Založenie nového účtu");
         System.out.println("2) Vytvor vklad");
         System.out.println("3) Vytvor výber");
         System.out.println("4) Vypíš info o účte");
         System.out.println("0) Koniec");

         volba = kb.next();

         while (volba.equalsIgnoreCase("0") && volba.equalsIgnoreCase("1")
               && volba.equalsIgnoreCase("2") && volba.equalsIgnoreCase("3")
               && volba.equalsIgnoreCase("4"))
         {
            System.out.println("Nesprávna voľba!");
            System.out
                  .println("Zopakujte voľbu znova a zadajte číslo od 0 do 4");
            volba = kb.next();
         }

         System.out.println("Vaša voľba: " + volba);
         switch (volba)
         {

            case "1":
               zalozenieUctu(klienti, ucty, kb);
               break;
            case "2":
               vytvorVklad(klienti, ucty, kb);
               break;
            case "3":
               vytvorVyber(klienti, ucty, kb);
               break;
            case "4":
               VypisInfoOUcte(klienti, ucty, kb);
               break;
            default:
               if (volba.equalsIgnoreCase("0"))
               {
                  break;
               }
               else
               {
                  System.out.println("Nesprávny výber!");
               }
         }
      }
      while (!volba.equalsIgnoreCase("0"));
      System.out.println("Aplikácia sa ukončuje!");

   }

   /**
    * Táto metóda služí na vytvorenie učtu
    */
   public static void zalozenieUctu(Klienti klienti, BankoveUcty ucty,
         Scanner kb)
   {

      BankovyUcet sporiaciUcet = new SporiaciUcet();
      BankovyUcet beznyUcet = new BeznyUcet();

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Založenie nového účtu\n");
      System.out
            .println("======================================================================\n");

      System.out.println("Zadajte meno: ");
      String meno = kb.next();
      System.out.println("Zadajte priezvisko: ");
      String priezvisko = kb.next();
      System.out.println("Zadajte rodné číslo:");
      long rc = kb.nextLong();
      System.out.println("O aký účet máte záujem (bežný alebo sporiaci)? ");
      String typUctu = kb.next();

      Klient klient = new Klient(meno, priezvisko, rc);
      klienti.pridajKlienta(klient);

      while (!(typUctu.equalsIgnoreCase("bežný") || typUctu
            .equalsIgnoreCase("sporiaci")))
      {
         System.out.println("Nesprávny výber!");
         System.out.println("V ponuke máme bežný alebo sporiaci účet ");
         typUctu = kb.next();
      }
      if (typUctu.equalsIgnoreCase("bežný"))
      {
         beznyUcet.setTypUctu(typUctu);

         vygenerujIdAjPreKlientaBU(klient, beznyUcet);
         ucty.pridajUcet(beznyUcet);
      }
      else
      {
         sporiaciUcet.setTypUctu(typUctu);

         vygenerujIdAjPreKlientaBU(klient, sporiaciUcet);
         ucty.pridajUcet(sporiaciUcet);
      }

      System.out.println(klient);
      System.out.print("Typ účtu: ");

      if (typUctu.equalsIgnoreCase(sporiaciUcet.getTypUctu()))
      {
         System.out.println(sporiaciUcet.getTypUctu());
         vytvorPociatocnyVklad(sporiaciUcet, kb);
      }
      else
      {
         System.out.println(beznyUcet.getTypUctu());
         vytvorPociatocnyVklad(beznyUcet, kb);
      }
   }

   /**
    * Táto metóda slúži na vytvorenie počiatočného vkladu na účet
    * 
    * @param ucet
    *           učet, na ktorý má byť vložený počiatočný vklad
    * @param kb
    *           Scanner objekt vstupu
    */
   public static void vytvorPociatocnyVklad(BankovyUcet ucet, Scanner kb)
   {
      final double POC_VKLAD_BU = 100;
      final double POC_VKLAD_SU = 50;

      System.out.println("Aký počiatočný vklad chcete v eur: ");

      double pociatocnyVklad = kb.nextDouble();

      if (ucet.getTypUctu().equalsIgnoreCase("sporiaci"))
      {
         while (pociatocnyVklad < POC_VKLAD_SU)
         {
            System.out
                  .println("Nedostatočný počiatočný vklad. Počiatočný vklad musí byť minimálne "
                        + POC_VKLAD_SU + " Eur.");
            pociatocnyVklad = kb.nextDouble();
         }

         ucet.vloz(pociatocnyVklad);
         ucet.pripisUrok();

         System.out
               .println("======================================================================");
         System.out
               .print("Vklad na účet bol úspešne zrealizovaný. Aktuálny zostatok na účte: ");
         System.out.println(ucet.getAktualnyZostatok());
      }
      else if (ucet.getTypUctu().equalsIgnoreCase("bežný"))
      {

         while (pociatocnyVklad < POC_VKLAD_BU)
         {
            System.out
                  .println("Nedostatočný počiatočný vklad. Počiatočný vklad musí byť minimálne "
                        + POC_VKLAD_BU + " Eur.");
            pociatocnyVklad = kb.nextDouble();
         }

         ucet.vloz(pociatocnyVklad);
         ucet.pripisUrok();
         System.out
               .print("Vklad na účet bol úspešne zrealizovaný. Aktuálny zostatok na účte:");
         System.out.println(ucet.getAktualnyZostatok());
      }
      System.out
            .println("======================================================================");
   }

   /**
    * Táto metóda slúži na vytvorenie vkladu a vloženie prostriedkov na účet
    */
   public static void vytvorVklad(Klienti klienti, BankoveUcty ucty, Scanner kb)
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie vkladu\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie sú dostupné žiadne účty\n");
         System.out
               .println("======================================================================");
         return;
      }

      BankovyUcet zmena = null;

      int index;

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();

      System.out.println("Zadaj rodné číslo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Žiaden klient so zadaným priezviskom, alebo s rodným číslom sa nenašiel!");
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodné číslo klienta: ");
         rc = kb.nextLong();
         
         System.out.println("Chcete ukoncit vyhladavanie? s klavesou 0 ukoncite");
         String koniec = kb.next();
         if(koniec.equals("0"))
         {
            return;
         }
      }

      System.out.println("Aký vklad chcete vložiť na účet v eur: ");
      double vklad = kb.nextDouble();

      while (vklad < 0.0)
      {
         System.out.println("Nedostatočný  vklad. Vklad musí byť viac " + 0
               + " Eur.");
         vklad = kb.nextDouble();
      }
      index = ucty.getIndexBu(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena.vloz(vklad);
      zmena.pripisUrok();
      ucty.urobZmenuNaUcte(zmena, index);

      System.out
            .println("======================================================================");
      System.out
            .println("Vklad na účet bol úspešne zrealizovaný. Aktuálny zostatok na účte: ");
      System.out.println(zmena.getAktualnyZostatok());
      System.out
            .println("======================================================================");

   }

   /**
    * Táto metóda slúži na vytvornie a umožnuje vybrať peniaze z účtu, a zároveň
    * skonroluje čí vyberaná čiastka nie je vyššia ako stáv na účte ale môže
    * dôjsť k nepovolenému prečerpániu z dôvodov zaučtovania poplatkov za vyber
    */
   public static void vytvorVyber(Klienti klienti, BankoveUcty ucty, Scanner kb)
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie výberu\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie sú dostupné žiadne účty\n");
         System.out
               .println("======================================================================");
         return;
      }

      BankovyUcet zmena = null;
      int index;

      double zostatok;

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();

      System.out.println("Zadaj rodné číslo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Žiaden klient so zadaným priezviskom, alebo s rodným číslom sa nenašiel!");
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodné číslo klienta: ");
         rc = kb.nextLong();
      }

      System.out.println("Koľko Eur si požadujete vybrať z účtu? ");
      double vyber = kb.nextDouble();

      zostatok = ucty.vyhladajUcet(
            klienti.vyhladajKlienta(priezvisko, rc).getRovnakeId())
            .getAktualnyZostatok();
      while (vyber > zostatok)
      {
         System.out.println("Na účte nie je dostatok finančných prostriedkov!");
         System.out.println("Koľko Eur si požadujete vybrať z účtu? ");
         vyber = kb.nextDouble();
      }

      index = ucty.getIndexBu(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
            .getRovnakeId());
      zmena.vyber(vyber);
      ucty.urobZmenuNaUcte(zmena, index);

      System.out
            .println("======================================================================");
      System.out
            .println("Výber z účtu bol úspešne zrealizovaný. Aktuálny zostatok na účte:");
      System.out.println(zmena.getAktualnyZostatok());
      System.out
            .println("======================================================================");

   }

   /**
    * Vypise informácie o účte
    * 
    * @param klienti
    *           vyhľada klienta podľa zadaných kríterii a vratí
    *           indentifikator,ktorý sluzi na vyhladanie učtu
    * @param ucty
    *           zoznám učtov
    * @param kb
    *           Scanner vstupu
    */
   public static void VypisInfoOUcte(Klienti klienti, BankoveUcty ucty,
         Scanner kb)
   {

      System.out
            .println("======================================================================\n");
      System.out.println("Menu - Vytvorenie výpisu o účte\n");
      System.out
            .println("======================================================================\n");

      if (ucty.jePrazdnyBU())
      {
         System.out
               .println("======================================================================");
         System.out.println("Nie sú dostupné žiadne účty\n");
         System.out
               .println("======================================================================");
         return;
      }

      Klient kl = new Klient();

      System.out.println("Zadaj priezvisko klienta: ");
      String priezvisko = kb.next();
      System.out.println("Zadaj rodné číslo klienta: ");
      long rc = kb.nextLong();

      while (klienti.vyhladajKlienta(priezvisko, rc).getMeno() == null)
      {
         System.out
               .println("Žiaden klient so zadaným priezviskom, alebo s rodným číslom sa nenašiel!");
         System.out.println("Zadaj priezvisko klienta: ");
         priezvisko = kb.next();

         System.out.println("Zadaj rodné číslo klienta: ");
         rc = kb.nextLong();
      }

      kl = klienti.vyhladajKlienta(priezvisko, rc);

      System.out
            .println("======================================================================================================");
      System.out.println("Meno: " + kl.getMeno() + " " + kl.getPriezvisko()
            + "  Rodné Číslo: " + kl.getRodneCislo() + " Číslo účtu #: "
            + kl.getRovnakeId());

      if (ucty
            .vyhladajUcet(
                  klienti.vyhladajKlienta(priezvisko, rc).getRovnakeId())
            .getTypUctu().equalsIgnoreCase("bežný"))
      {

         BankovyUcet bu = new BeznyUcet();
         bu = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
               .getRovnakeId());
         System.out.println("Aktuálny zostatok: " + bu.getAktualnyZostatok()
               + " Eur.");
         System.out.println(bu.getTypUctu() + ": " + bu.getRovnakeId());
         System.out.println("Úroková sadzba: " + bu.getUrok() + "%");
      }
      else
      {
         BankovyUcet su = new SporiaciUcet();
         su = ucty.vyhladajUcet(klienti.vyhladajKlienta(priezvisko, rc)
               .getRovnakeId());
         System.out.println("Aktuálny zostatok: " + su.getAktualnyZostatok()
               + " Eur.");
         System.out.println(su.getTypUctu() + ": " + su.getRovnakeId());
         System.out.println("Úroková sadzba: " + su.getUrok() + "%");
      }
      System.out
            .println("======================================================================================================");
   }

   /**
    * Tato metoda zobrazuje aktualny datum s nazvom mesiaca a aktualny cas
    * spustenia aplikacie
    */
   public static void zobrazAktualnyDatum()
   {
      Datum datum = new Datum();
      System.out.println(datum.getDen() + "/" + datum.getNazovMesiaca() + "/"
            + datum.getRok());
      System.out.println(datum.toStringCas());
   }

   /**
    * Generuje a vytvára jedinečné číslo, ktoré je zároven nastavene pre klienta
    * aj učet , číže podľa toho sa dá daný účet sparovať s klientom
    * 
    * @param klient
    *           ktorému je pridelené rovnaké indentifikačné číslo ako učtu
    * @param ucet
    *           ktorý má pridelené rovnaké číslo ako klient
    */
   public static void vygenerujIdAjPreKlientaBU(Klient klient, BankovyUcet ucet)
   {
      if (ucet.getTypUctu().equalsIgnoreCase("bežný"))
      {
         int range = 5000 - 1000 + 1;
         int rand = (int) (Math.random() * range) + 1000;
         int cislo = rand;
         klient.setRovnakeId(cislo);
         ucet.setRovnakeId(cislo);
      }
      else
      {
         int range = 9000 - 5000 + 1;
         int rand = (int) (Math.random() * range) + 1000;
         int cislo = rand;
         klient.setRovnakeId(cislo);
         ucet.setRovnakeId(cislo);
      }
   }
   
   public static void prihlasenieSa(Scanner kb)
   {
      do
      {
         System.out.println("Ktoru z nasledujucich moznosti si prajete uskutocnit? A) Prihlasi sa, B) Zaregistrovat sa");
      }
   }
   
    

}


